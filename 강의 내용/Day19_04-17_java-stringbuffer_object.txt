· String Buffer
  : 길이를 정해놓고, 문자열을 계속해서 추가할 수 있다.


※ 객체 Object

· 절차지향 / 객체지향

절차 지향형 언어 - C언어
객체 지향형 언어 (OOL : Object Oriented Language) - Java, C#, Python
* 객체 기반 언어 - Javascript

· 객체란?
  1) 모든 사물
  2) 클래스 - 객체


· OOP(Object Oriented Programming)

- 객체가 가진 2가지 : 속성(특징, 외양, 색, ...)
	     	   행동(run, stop, lturn, rturn, ...)

- 객체 사용법 3가지
  1) 객체.속셩 = 값
	mycar.color = "black";
  2) 객체.메소드()
	mycar.travel();
  3) 객체.속성
	mycar.color

- OOP 작성 3단계
  1) 설계
	class Car {
		String color;
		int door;
	}
  2) 제작
	Car mycar = new car(); => Heap 메모리에 Class로 생성 => 객체(인스턴스)
	    객체 참조 변수

  3) 사용
	(1) 객체.속성 = 값
		mycar.color = "black";
	(2) 객체.메소드()
		mycar.run();
	(3) 객체.속성
		System.out.println(mycar.color);

- 클래스 종류
  1) user defined class 사용자 정의 클래스
	: 3단계를 개발자가 전부 구성
  2) inner class 내장 클래스
	: 2-3단계만 구성, 3단계만 구성하기도 한다.

- OOP가 가지는 특징 네가지 : 캡슐화, 상속, 추상화, 다형성
  1) 캡슐화 : 정보 은닉(필드와 메소드를 묶어 캡슐화) => private(access modifier 접근지정자)
  2) 상속 : 상위의 것들을 하위로 상속 가능
  3) 추상화 : 같은 형태에 이름을 하나로 정하고 여러 가지로 정의할 수 있다.
  4) 다형성 : polymorphism, 하나의 이름으로 정의된 것이 여러가지 기능을 할 수 있다.
	     추상메소드가 overriding되어 사용됨
	     overloading	vs	overriding
	     (중복)			(재사용-상속)

- 접근 지정자 access modifier

  1) private : 같은 클래스에서만 접근 가능
  2) public  : 외부 클래스에서도 접근 가능
  3) (default) : 같은 패키지에서 접근 가능
  4) protected : 상속 관계에 있는 클래스 끼리만 접근 가능(부모 - 자식 클래스)
