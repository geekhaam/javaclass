※ Thread

· Thread를 사용하는 두 가지 방식
  1) extends Thread : simple, 확장성X (다중상송X)
  2) implements Runnable : 인터페이스, 확장성O, 상속O (기본 상속도 가능, 다른 인터페이스)


· 우선순위 : priority (Java Thread : 1-10), 만능X
  MIN_PRIORITY = 1
  NORM_PRIORITY = 5 (default)
  MAX_PRIORITY = 10

  채팅과 동시에 파일을 전송시 채팅에 우선순위를 더 두어야 원활하게 느껴진다.
  -> 우선순위

  JVM이 Thread Scheduling을 담당

  방식 : 선점 방식 / 비선점 방식

    - Round-Robin 방식 : 시분할 방식 (비선점)

    - Preemptive(선점) 방식 : 높은 우선순위가 우선, 낮은 우선순위는 높은 우선순위가
			  종료 or block 될 때까지 기다린다.

    - 다단계 큐 방식(MQ : Multi level Queue)
     : 다른 큐로 이동X. 상위 queue에 값이 들어오면 상위 queue로 cpu할당

    - 다단계 피드백 큐 방식(MFQ: Multi level Feedback Queue)
     : 낮은 우선 순위 쓰레드의 starvation을 완화시켜주는 방식으로
       1순위 쓰레드가 1번 큐, 2순위 쓰레드는 2번 큐이며,
       1순위쪽으로 갈수록 시간 설정은 작으며 다른 큐로 이동 가능한 방식
    
    - join()
	join()이 기다리고 있다가 수행이 넘어오면 join()의 내용을 수행한 다음
	다시 원래의 수행으로 되돌아 간다.
	join()에 시간을 주지 않으면 무한 대기 상태이고,
	join()에 시간을 주면 그 시간이 지난 뒤 join()이 수행된다.